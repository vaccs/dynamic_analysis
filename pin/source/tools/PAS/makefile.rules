##############################################################
#
# This file includes all the test targets as well as all the
# non-default build rules and test recipes.
#
##############################################################


##############################################################
#
# Test targets
#
##############################################################

###### Place all generic definitions here ######

# This defines tests which run tools of the same name.  This is simply for convenience to avoid
# defining the test name twice (once in TOOL_ROOTS and again in TEST_ROOTS).
# Tests defined here should not be defined in TOOL_ROOTS and TEST_ROOTS.
TOOL_ROOTS = pas_analysis

TOOLS = $(TOOL_ROOTS:%=$(OBJDIR)%$(PINTOOL_SUFFIX) )

# This defines the static analysis tools which will be run during the the tests. They should not
# be defined in TEST_TOOL_ROOTS. If a test with the same name exists, it should be defined in
# TEST_ROOTS.
# Note: Static analysis tools are in fact executables linked with the Pin Static Analysis Library.
# This library provides a subset of the Pin APIs which allows the tool to perform static analysis
# of an application or dll. Pin itself is not used when this tool runs.
SA_TOOL_ROOTS :=

# This defines all the applications that will be run during the tests.
APP_ROOTS :=

# This defines any additional object files that need to be compiled.
OBJECT_ROOTS :=

# This defines any additional dlls (shared objects), other than the pintools, that need to be compiled.
DLL_ROOTS :=

# This defines any static libraries (archives), that need to be built.
LIB_ROOTS :=

###### Define the sanity subset ######

# This defines the list of tests that should run in sanity. It should include all the tests listed in
# TEST_TOOL_ROOTS and TEST_ROOTS excluding only unstable tests.
SANITY_SUBSET := $(TEST_TOOL_ROOTS) $(TEST_ROOTS)


##############################################################
#
# Test recipes
#
##############################################################

# This section contains recipes for tests other than the default.
# See makefile.default.rules for the default test rules.
# All tests in this section should adhere to the naming convention: <testname>.test


##############################################################
#
# Build rules
#
##############################################################
VACCS_DIR = ../../../../vaccs_pin_cpp
VACCS_ODIR = $(VACCS_DIR)/libs
#COMPONENT_INCLUDES+=

# This section contains the build rules for all binaries that have special build rules.
# See makefile.default.rules for the default build rules.
#
#


VACCS_OBJS = util/general.o \
   util/c_string_utils.o \
   util/memory_info.o \
   util/vaccs_config.o \
   io/vaccs_record.o \
   io/arch_record.o \
   io/asm_record.o \
   io/binary_record.o \
   io/ccode_record.o \
   io/cmd_line_record.o \
   io/func_inv_record.o \
   io/output_record.o \
   io/register_record.o \
   io/return_record.o \
   io/return_addr_record.o \
   io/sd_clear_record.o \
   io/sd_czero_record.o \
   io/sd_lock_record.o \
   io/sd_set_record.o \
   io/sd_unlock_record.o \
   io/section_record.o \
   io/var_access_record.o \
   io/vaccs_record_factory.o \
   io/vaccs_record_reader.o \
   io/malloc_record.o \
   io/free_record.o \
   tables/cu_table.o \
   tables/deref.o \
   tables/frame.o \
   tables/heap.o \
   tables/symbol_table.o \
   tables/symbol_table_factory.o\
   tables/type_table.o \
   tables/var_table.o \
   vaccs_read/vaccs_dw_reader.o

VOBJS = $(addprefix $(VACCS_ODIR)/, $(VACCS_OBJS))

TOOL_CXXFLAGS += -g -I$(VACCS_ODIR)

all: tools
tools: $(OBJDIR) $(TOOLS)
test: $(OBJDIR) $(TOOL_ROOTS:%=%.test)

#$(OBJDIR):
#mkdir -p $(OBJDIR)

#$(OBJDIR)%.o : %.cpp
#$(CXX) -c $(CXXFLAGS) $(PIN_CXXFLAGS) ${OUTOPT}$@ $<


$(TOOLS): $(OBJDIR)pas_analysis.o $(OBJDIR)return.o $(PIN_LIBNAMES)


$(OBJDIR)pas_analysis$(PINTOOL_SUFFIX):  $(OBJDIR)return$(OBJ_SUFFIX) $(OBJDIR)global$(OBJ_SUFFIX) $(OBJDIR)malloc_free$(OBJ_SUFFIX) $(OBJDIR)InstructionInstrumentation$(OBJ_SUFFIX) $(OBJDIR)functionInvocation$(OBJ_SUFFIX) $(OBJDIR)memory_access$(OBJ_SUFFIX) $(OBJDIR)stack_operation$(OBJ_SUFFIX) $(OBJDIR)database_access_api$(OBJ_SUFFIX) $(OBJDIR)monitor_registers$(OBJ_SUFFIX) $(OBJDIR)function_call$(OBJ_SUFFIX) $(OBJDIR)section_info$(OBJ_SUFFIX) $(OBJDIR)sd$(OBJ_SUFFIX)
#make -C $(VACCS_DIR)
	$(LINKER) $(TOOL_LDFLAGS_NOOPT) $(LINK_EXE)$@ $(^:%.h=) $(VOBJS) $(TOOL_LPATHS) $(TOOL_LIBS)
